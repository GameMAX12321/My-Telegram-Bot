from datetime import datetime
import random
import sqlite3
import telebot
from telebot import types

bot = telebot.TeleBot("NO")

# Global variable
lidername = None
money = None
dilerCards = {}
yourCards = {}
dilerPoints = {}
yourPoints = {}
deposit = {}
inGame = []
start = {}
last_time1 = {}
last_time2 = {}
last_time3 = {}
last_time4 = {}
last_time5 = {}

# Basic comands
def starting():
    conn = sqlite3.connect("liders.sql")
    cur = conn.cursor()
	
    cur.execute("CREATE TABLE IF NOT EXISTS liders (id int primary key, name varchar(50), user_id int, reputation int, money int, bank int, allmoney int)")
    
    conn.commit()
    cur.close()
    conn.close()

starting()

@bot.callback_query_handler(func = lambda callback: True)
def callbacks(callback):
    global dilerCards
    global yourCards
    global deposit
    global dilerPoints
    global yourPoints
    global start
    user_id = callback.from_user.id
    if callback.data == "thanks":
        bot.answer_callback_query(callback_query_id = callback.id, text = "–°–ø–∞—Å–∏–±–æ")
    elif callback.data == "takecard" and callback.from_user.id == user_id:
        try:
            dilerCards[user_id] += CreateCards()
        except KeyError:
            dilerCards[user_id] = CreateCards()
        try:
            yourCards[user_id] += CreateCards()
        except KeyError:
            yourCards[user_id] = CreateCards()
        dilerCards1 = dilerCards[user_id][::-1]
        yourCards1 = yourCards[user_id][::-1]
        if dilerCards1[1] == "2":
            dilerPoints[user_id] += 2
        elif dilerCards1[1] == "3":
            dilerPoints[user_id] += 3
        elif dilerCards1[1] == "4":
            dilerPoints[user_id] += 4
        elif dilerCards1[1] == "5":
            dilerPoints[user_id] += 5
        elif dilerCards1[1] == "6":
            dilerPoints[user_id] += 6
        elif dilerCards1[1] == "7":
            dilerPoints[user_id] += 7
        elif dilerCards1[1] == "8":
            dilerPoints[user_id] += 8
        elif dilerCards1[1] == "9":
            dilerPoints[user_id] += 9
        elif dilerCards1[1] == "10":
            dilerPoints[user_id] += 10
        elif dilerCards1[1] == "J":
            dilerPoints[user_id] += 10
        elif dilerCards1[1] == "Q":
            dilerPoints[user_id] += 10
        elif dilerCards1[1] == "K":
            dilerPoints[user_id] += 10
        elif dilerCards1[1] == "A":
            dilerPoints[user_id] += 11
        if yourCards1[1] == "2":
            yourPoints[user_id] += 2
        elif yourCards1[1] == "3":
            yourPoints[user_id] += 3
        elif yourCards1[1] == "4":
            yourPoints[user_id] += 4
        elif yourCards1[1] == "5":
            yourPoints[user_id] += 5
        elif yourCards1[1] == "6":
            yourPoints[user_id] += 6
        elif yourCards1[1] == "7":
            yourPoints[user_id] += 7
        elif yourCards1[1] == "8":
            yourPoints[user_id] += 8
        elif yourCards1[1] == "9":
            yourPoints[user_id] += 9
        elif yourCards1[1] == "10":
            yourPoints[user_id] += 10
        elif yourCards1[1] == "J":
            yourPoints[user_id] += 10
        elif yourCards1[1] == "Q":
            yourPoints[user_id] += 10
        elif yourCards1[1] == "K":
            yourPoints[user_id] += 10
        elif yourCards1[1] == "A":
            yourPoints[user_id] += 11
        info = f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: –ù–µ–∏–∑–≤–µ—Å—Ç—ã\n"
        info += f"\n–¢–≤–æ–∏ –æ—á–∫–∏: {yourPoints[user_id]}\n–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:\n"
        for el in yourCards[user_id]:
            sim = str(el)
            info += f"{sim} "
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data = "takecard"))
        markup.add(types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É", callback_data = "stopgame"))  
        bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = info, reply_markup = markup)
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()

        cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if start[user_id] == 0:
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] - deposit[user_id], result[1] - deposit[user_id], user_id))
            conn.commit()
            start[user_id] = 1
        else:
            pass
        
        if yourPoints[user_id] < 21 and dilerPoints[user_id] < 21:
            pass
        elif yourPoints[user_id] > 21:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª: {deposit[user_id]}üí∏")
            inGame.remove(user_id)
        elif dilerPoints[user_id] > 21:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {deposit[user_id] * 2}üí∏")
            inGame.remove(user_id)
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + deposit[user_id] * 2, result[1] + deposit[user_id] * 2, user_id))
            
            conn.commit()
        elif yourPoints[user_id] == 21 and dilerPoints[user_id] == 21:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = "–ù–∏—á—å—è")
            inGame.remove(user_id)
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + deposit[user_id], result[1] + deposit[user_id], user_id))
            
            conn.commit()
        elif yourPoints[user_id] == 21:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {deposit[user_id] * 2}üí∏")
            inGame.remove(user_id)
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + deposit[user_id] * 2, result[1] + deposit[user_id] * 2, user_id))
            
            conn.commit()
        elif dilerPoints[user_id] == 21:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª: {deposit[user_id]}üí∏")
            inGame.remove(user_id)
        cur.close()
        conn.close()
    elif callback.data == "stopgame" and callback.from_user.id == user_id:
        info = f"–û—á–∫–∏ –î–∏–ª–µ—Ä—Ä—Ä–∞: {dilerPoints[user_id]}\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:\n"
        for el in dilerCards[user_id]:
            sim = str(el)
            info += f"{sim} "
        info += f"\n–¢–≤–æ–∏ –æ—á–∫–∏: {yourPoints[user_id]}\n–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:\n"
        for el in yourCards[user_id]:
            sim = str(el)
            info += f"{sim} "
        bot.send_message(callback.message.chat.id, info)
        user_id = callback.from_user.id
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()

        cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
        result = cur.fetchone()
        
        if yourPoints[user_id] < dilerPoints[user_id]:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª: {deposit[user_id]}üí∏")
            inGame.remove(user_id)
        elif yourPoints[user_id] > dilerPoints[user_id]:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {deposit[user_id] * 2}üí∏")
            inGame.remove(user_id)
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + deposit[user_id] * 2, result[1] + deposit[user_id] * 2, user_id))
            conn.commit()
        elif yourPoints[user_id] == dilerPoints[user_id]:
            bot.edit_message_text(chat_id = callback.message.chat.id, message_id = callback.message.id, text = "–ù–∏—á—å—è")
            inGame.remove(user_id)
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + deposit[user_id], result[1] + deposit[user_id], user_id))
            
            conn.commit()
        bot.answer_callback_query(callback_query_id = callback.id, text = f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
        cur.close()
        conn.close()

@bot.message_handler(commands = ["start"])
def starts(message):	
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û–∫, –Ω–∞—á–Ω—ë–º", callback_data = "thanks"))
    bot.reply_to(message, "–ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É!", reply_markup = markup)

@bot.message_handler(commands = ["help"])
def help(message):
    command = ["work", "slut", "crime", "liders", "liderboard", "dep", "deposit", "withdraw", "stat", "stats", "rob", "robbing", "give", "givemoney", "give", "givemoney", "add", "addmoney", "roulette", "slots", "slotmachine", "blackjack", "kick", "mute", "unmute"]
    args = message.text.split()[1:]
    try:
        argument = args[0]
    except IndexError:
        argument = None
    if argument is None:
        bot.send_message(message.chat.id, "–í—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞\n/help - –≤—ã–¥–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∑–Ω–∞–∫–∞ / —Ç–æ –≤—ã–¥–∞—Å—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n\n–ï–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/work - —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥\n/slut - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∏—Ö\n/crime - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –º–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥\n/liders –∏–ª–∏ /liderboard - –≤—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ø–∞–¥–∞–Ω–∏—è\n/dep –∏–ª–∏ /deposit - –ª–æ–∂–∏—Ç –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫ –Ω–µ –¥–∞–≤–∞—è –∏—Ö —É–∫—Ä–∞—Å—Ç—å\n/withdraw - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞\n/stat –∏–ª–∏ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ—é –∏–ª–∏ —á—É–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –¥–µ–Ω—å–≥–∏, –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ, –≤—Å–µ –¥–µ–Ω—å–≥–∏\n/rob –∏–ª–∏ /robbing - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏ —É –¥—Ä—É–≥–æ–≥–æ\n/give –∏–ª–∏ /givemoney - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á—ë—Ç –¥—Ä—É–≥–æ–≥–æ\n/add –∏–ª–∏ /addmoney - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –≤—ã–¥–∞—Ç—å —Å–µ–±–µ –Ω–∞ —Å—á–µ—Ç –ª—é–±—É—é —Å—É–º—É –¥–µ–Ω–µ–≥\n/roulette - —Å—Ç–∞–≤–∏—Ç —Å—Ç–∞–≤–∫—É –Ω–∞ —Ä—É–ª–µ—Ç–∫—É\n/slots –∏–ª–∏ /slotmacine - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã\n/blackjack - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫\n\n–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n\n/kick - —É–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–∞ –∏–∑ –±–µ—Å–µ–¥—ã\n/mute - –∑–∞–ø—Ä–µ—â—è–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n/unmute - —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É")
    elif argument in command:
        if argument == "work":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/work\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è—Ç —Ä–∞–∑ –≤ 4 —á–∞—Å–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        elif argument == "slut":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/slut\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑ –≤ 3 —á–∞—Å–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        elif argument == "crime":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/crime\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑ –≤ 5 —á–∞—Å–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        elif argument == "liders" or argument == "liderboard":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/liders –∏–ª–∏ /liderboard\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –º–µ—Ä–µ —Å–ø–∞–¥–∞–Ω–∏—è, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        elif argument == "dep" or argument == "deposit":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/dep –∏–ª–∏ /deposit –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫, args1 —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏")
        elif argument == "withdraw":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/withdraw –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —è –±–∞–Ω–∫–∞, args1 —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ")
        elif argument == "stat" or argument == "stats":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/stat –∏–ª–∏ /stats –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç–µ—Ç—å —Ç–≤–æ–∏ —Å—Ç–∞—Ç—ã –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ—Å–º–æ—Ç–µ—Ä—Ç—å —á—É–∂–∏–µ –µ—Å–ª–∏, —Ç—ã –≤–≤–µ–¥–µ—à—å –µ–≥–æ –∞–π–¥–∏ —Ç–∞–∫ —á—Ç–æ args1 —á–∏—Å–ª–æ –∏–ª–∏ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        elif argument == "rob" or argument == "robbing":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/rob –∏–ª–∏ /robbing –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏, —Ç—ã –≤–≤–µ–¥–µ—à—å –µ–≥–æ –∞–π–¥–∏ —Ç–∞–∫ —á—Ç–æ args1 —á–∏—Å–ª–æ –∏–ª–∏ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        elif argument == "give" or argument == "givemoney":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/give –∏–ª–∏ /givemoney –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1) –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args2)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å–ª–∏, —Ç—ã –≤–≤–µ–¥–µ—à—å –µ–≥–æ –∞–π–¥–∏ —Ç–∞–∫ —á—Ç–æ args1 —á–∏—Å–ª–æ –∏–ª–∏ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        elif argument == "add" or argument == "addmoney":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/add –∏–ª–∏ /addmoney –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –ª—é–±—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥, args1 —á–∏—Å–ª–æ(–ù–ï –¥–æ—Å—É–ø–Ω–∞ –ø—Ä–æ—Å—Ç—ã–º —Å–º–µ—Ä—Ç–Ω—ã–º)")
        elif argument == "roulette":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/roulette –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1, args2)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ä—É–ª–µ—Ç–∫—É, args1 —á–∏—Å–ª–æ —ç—Ç–æ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏ args2 –º–æ–∂–µ—Ç –±—ã—Ç—å: black, red, odd, even –∏ —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 36")
        elif argument == "slots" or argument == "slotmachine":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/slots –∏–ª–∏ /slotmachine –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã, args1 —á–∏—Å–ª–æ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏")
        elif argument == "blackjack":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/blackjack –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫, args1 —á–∏—Å–ª–æ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏")
        elif argument == "kick":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/kick –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∏–∫–Ω—É—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –±–µ—Å–µ–¥—ã, args1 –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞(–ù–ï –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ—Å—Ç—ã–º —Å–º–µ—Ä—Ç–Ω—ã–º)")
        elif argument == "mute":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/mute –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1) –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args2)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å –º–æ–ª—á–∞—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–ª—ë–Ω–æ–µ –≤—Ä–µ–º—è, args1 —á–∏—Å–ª–æ –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ args2 —á–∏—Å–ª–æ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –¥–æ 3 –¥–Ω–µ–π")
        elif argument == "unmute":
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n/unmute –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(args1)\n–û–ø–∏—Å–∞–Ω–∏–µ:\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∫ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–∞–∑–º—É—Ç–∏—Ç—å —é–∑–µ—Ä–∞, args1 —á–∏—Å–ª–æ –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞")
    else:
        bot.reply_to(message, "–ù–µ—Ç—É —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")
		
# Economy bot commands
@bot.message_handler(commands=["work"])
def work(message):
    global last_time1
    global lidername
    global money
    user_id = message.from_user.id
    if user_id not in last_time1:
        delta = 14500
    else:
        delta = (datetime.now() - last_time1[user_id]).total_seconds()
    if delta > 14400:
        lidername = message.from_user.id
        user_name = message.from_user.first_name
        money = random.randint(150, 500)
        bot.send_message(message.chat.id, f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: {money}üí∏")
    
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
    
        cur.execute("SELECT money, bank FROM liders WHERE user_id = ?", (lidername,))
        result = cur.fetchone()
    
        if result:
            new_money = result[0] + money
            bank_money = result[1]
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (new_money, lidername))
            cur.execute("UPDATE liders SET allmoney = ? WHERE user_id = ?", (new_money + bank_money, lidername))
            cur.execute("UPDATE liders SET name = ? WHERE user_id = ?", (user_name, lidername))
        else:
            cur.execute("INSERT INTO liders (user_id, money, allmoney, name) VALUES (?, ?, ?, ?)", (lidername, money, money, user_name))
    
        conn.commit()
        cur.close()
        conn.close()
        last_time1[user_id] = datetime.now()
    else:
    	bot.reply_to(message, "–ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 4 —á–∞—Å–∞")
        
@bot.message_handler(commands = ["slut"])
def slut(message):
    global lidername
    global money
    global last_time2
    user_id = message.from_user.id
    if user_id not in last_time2:
    	delta = 11000
    else:
    	delta = (datetime.now() - last_time2[user_id]).total_seconds()
    if delta > 10800:
        chance = random.randint(1, 3)
        lidername = message.from_user.id
        user_name = message.from_user.first_name
        if chance != 3:
            money = random.randint(430, 1000)
            bot.send_message(message.chat.id, f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: {money}üí∏")
        else:
    	    money = random.randint(0, 150)
    	    bot.send_message(message.chat.id, f"–¢–µ–±—è –æ–±–æ–∫—Ä–∞–ª–∏ –Ω–∞: -{money}üí∏")
    
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
    
        cur.execute("SELECT money, bank FROM liders WHERE user_id = ?", (lidername,))
        result = cur.fetchone()
    
        if result and chance != 3:
            new_money = result[0] + money
            bank_money = result[1]
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (new_money, lidername))
            cur.execute("UPDATE liders SET allmoney = ? WHERE user_id = ?", (new_money + bank_money, lidername))
            cur.execute("UPDATE liders SET name = ? WHERE user_id = ?", (user_name, lidername))
        elif result and chance == 3:
            new_money = result[0] - money
            bank_money = result[1]
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (new_money, lidername))
            cur.execute("UPDATE liders SET allmoney = ? WHERE user_id = ?", (new_money + bank_money, lidername))
            cur.execute("UPDATE liders SET name = ? WHERE user_id = ?", (user_name, lidername))
        elif chance != 3:
            cur.execute("INSERT INTO liders (user_id, money, allmoney, name) VALUES (?, ?, ?, ?)", (lidername, money, money, user_name))
        else:
    	    cur.execute("INSERT INTO liders (user_id, money, allmoney, name) VALUES (?, ?, ?, ?)", (lidername, -money, -money, user_name))
    
        conn.commit()
        cur.close()
        conn.close()
        last_time2[user_id] = datetime.now()
    else:
        bot.reply_to(message, "–ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 3 —á–∞—Å–∞")
        
@bot.message_handler(commands = ["crime"])
def crime(message):
    global lidername
    global money
    global last_time3
    user_id = message.from_user.id
    if user_id not in last_time3:
    	delta = 18001
    else:
    	delta = (datetime.now() - last_time3[user_id]).total_seconds()
    if delta > 18000:
        chance = random.randint(1, 3)
        lidername = message.from_user.id
        user_name = message.from_user.first_name
        if chance != 3:
            money = random.randint(700, 1300)
            bot.send_message(message.chat.id, f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: {money}üí∏")
        else:
    	    money = random.randint(0, 400)
    	    bot.send_message(message.chat.id, f"–¢–µ–±—è –æ–±–æ–∫—Ä–∞–ª–∏ –Ω–∞: -{money}üí∏")
    
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
    
        cur.execute("SELECT money, bank FROM liders WHERE user_id = ?", (lidername,))
        result = cur.fetchone()
    
        if result and chance != 3:
            new_money = result[0] + money
            bank_money = result[1]
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (new_money, lidername))
            cur.execute("UPDATE liders SET allmoney = ? WHERE user_id = ?", (new_money + bank_money, lidername))
            cur.execute("UPDATE liders SET name = ? WHERE user_id = ?", (user_name, lidername))
        elif result and chance == 3:
            new_money = result[0] - money
            bank_money = result[1]
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (new_money, lidername))
            cur.execute("UPDATE liders SET allmoney = ? WHERE user_id = ?", (new_money + bank_money, lidername))
            cur.execute("UPDATE liders SET name = ? WHERE user_id = ?", (user_name, lidername))
        elif chance != 3:
            cur.execute("INSERT INTO liders (user_id, money, allmoney, name) VALUES (?, ?, ?, ?)", (lidername, money, money, user_name))
        else:
    	    cur.execute("INSERT INTO liders (user_id, money, allmoney, name) VALUES (?, ?, ?, ?)", (lidername, -money, -money, user_name))
    
        conn.commit()
        cur.close()
        conn.close()
        last_time3[user_id] = datetime.now()
    else:
    	bot.reply_to(message, "–ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 5 —á–∞—Å–æ–≤")
    
	
@bot.message_handler(commands = ["liders", "liderboard"])
def liderboard(message):
    global lidername
    args = message.text.split()[1:]
    try:
        args[0]
    except IndexError:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ—Ç—ã: money –∏–ª–∏ cash - –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –¥–µ–Ω—å–≥–∞–º, rep –∏–ª–∏ reputation - –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
        return
    lidername = message.from_user.id
    user_name = message.from_user.first_name
    conn = sqlite3.connect("liders.sql")
    cur = conn.cursor()
    
    cur.execute("UPDATE liders SET name = ? WHERE user_id = ?", (user_name, lidername))
    
    conn.commit()

    if args[0].lower() == "money" or args[0].lower() == "cash":
        cur.execute("SELECT name, allmoney FROM liders ORDER BY allmoney DESC")
        liders = cur.fetchall()
        if not liders:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –¥–µ–Ω—å–≥–∞–º.")
        else:
            info = "–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤:\n"
            for idx, el in enumerate(liders, start = 1):
                info += f"{idx}. –ò–º—è: {el[0]}, üí∏–¥–µ–Ω—å–≥–∏: {el[1]}\n"
            bot.send_message(message.chat.id, info)
    elif args[0].lower() == "rep" or args[0].lower() == "reputation":
        cur.execute("SELECT name, reputation FROM liders ORDER BY reputation DESC")
        liders = cur.fetchall()
        if not liders:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.")
        else:
            info = "–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤:\n"
            for idx, el in enumerate(liders, start = 1):
                info += f"{idx}. –ò–º—è: {el[0]}, —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {el[1]}\n"
            bot.send_message(message.chat.id, info)
    else:
        bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–∏—Ö –ª–∏–¥–µ—Ä–æ–≤")
    	
    cur.close()
    conn.close()
    
@bot.message_handler(commands = ["dep", "deposit"])
def dep(message):
    global lidername
    global money
    lidername = message.from_user.id
    args = message.text.split()[1:]
    try:
        depMoney = int(args[0])
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    except IndexError:
        bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    if depMoney < 0:
        bot.reply_to(message, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    else:
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
		
        cur.execute("SELECT money, bank FROM liders WHERE user_id = ?", (lidername,))
        result = cur.fetchone()
        if result[1] is None:
            res = 0
        else:
            res = result[1]
        if result and result[0] > 0 and result[0] >= depMoney:
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (result[0] - depMoney, lidername))
            cur.execute("UPDATE liders SET bank = ? WHERE user_id = ?", (res + depMoney, lidername))
            bot.reply_to(message, f"{message.from_user.first_name} –ø–æ–ª–æ–∂–∏–ª –≤ –±–∞–Ω–∫ {depMoney} –¥–µ–Ω–µ–≥üí∞")
        else:
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫ –¥–µ–Ω—å–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Çüè¶")
        conn.commit()
        cur.close()
        conn.close()
    
@bot.message_handler(commands = ["withdraw"])
def withdraw(message):
    global lidername
    global money
    lidername = message.from_user.id
    args = message.text.split()[1:]
    try:
        withMoney = int(args[0])
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    except IndexError:
        bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    if withMoney < 0:
        bot.reply_to(message, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    else:
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
		
        cur.execute("SELECT bank, money FROM liders WHERE user_id = ?", (lidername,))
        result = cur.fetchone()
        if result[0] is None:
            res = 0
        else:
            res = result[0]
        if result and result[0] > 0 and result[0] >= withMoney:
            cur.execute("UPDATE liders SET bank = ? WHERE user_id = ?", (res - withMoney, lidername))
            cur.execute("UPDATE liders SET money = ? WHERE user_id = ?", (result[1] + withMoney, lidername))
            bot.reply_to(message, f"{message.from_user.first_name} —Å–Ω—è–ª —Å –±–∞–Ω–∫–∞ {withMoney} –¥–µ–Ω–µ–≥üí∏")
        else:
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –≤ –±–∞–Ω–∫–µüè¶")
        conn.commit()
        cur.close()
        conn.close()
		
@bot.message_handler(commands=["stats", "stat"])
def stat(message):
    args = message.text.split()[1:]
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id

        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
        
        cur.execute("SELECT name, money, bank, allmoney, reputation FROM liders WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if result is None:
            bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ.")
        else:
            bot.reply_to(message, f"–°—Ç–∞—Ç—ã {result[0]}:\nüí∏–î–µ–Ω—å–≥–∏: {result[1]}\nüè¶–î–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ: {result[2]}\nüí∞–í—Å–µ –¥–µ–Ω—å–≥–∏: {result[3]}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {result[4]}")
        cur.close()
        conn.close()
    elif not args:
        userId = message.from_user.id
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
        
        cur.execute("SELECT name, money, bank, allmoney, reputation FROM liders WHERE user_id = ?", (userId,))
        result = cur.fetchone()
        
        if result is None:
            bot.reply_to(message, "–í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ.")
        else:
            bot.reply_to(message, f"–¢–≤–æ–∏ —Å—Ç–∞—Ç—ã:\n–ò–º—è: {result[0]}\nüí∏–î–µ–Ω—å–≥–∏: {result[1]}\nüè¶–î–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ: {result[2]}\nüí∞–í—Å–µ –¥–µ–Ω—å–≥–∏: {result[3]}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {result[4]}")
        cur.close()
        conn.close()
    else:
        try:
            user_id = int(args[0])
        except ValueError:
            bot.reply_to(message, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ü–∏—Ñ—Ä–∞—Ö")
            return
        except IndexError:
            bot.reply_to(message, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ü–∏—Ñ—Ä–∞—Ö")
            return

        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()
        
        cur.execute("SELECT name, money, bank, allmoney, reputation FROM liders WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if result is None:
            bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ.")
        else:
            bot.reply_to(message, f"–°—Ç–∞—Ç—ã {result[0]}:\nüí∏–î–µ–Ω—å–≥–∏: {result[1]}\nüè¶–î–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ: {result[2]}\nüí∞–í—Å–µ –¥–µ–Ω—å–≥–∏: {result[3]}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {result[4]}")
        cur.close()
        conn.close()

@bot.message_handler(commands = ["rob", "robbing"])
def rob(message):
    global money
    global last_time4
    args = message.text.split()[1:]
    user_id = message.from_user.id
    if user_id not in last_time4:
    	delta = 43201
    else:
    	delta = (datetime.now() - last_time4[user_id]).total_seconds()
    if delta > 43200:
        user_id = message.from_user.id
        if message.reply_to_message:
            chance = random.randint(1, 3)
            from_user = message.reply_to_message.from_user.id
            if chance != 3:
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()

                cur.execute("SELECT money, allmoney, name, user_id FROM liders WHERE user_id = ?", (from_user,))
                result = cur.fetchone()
                cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (user_id,))
                res = cur.fetchone()

                cur.close()
                conn.close()
                if result is None:
                    bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µü§∑")
                    return
                elif res[2] == result[3]:
                    bot.reply_to(message, "–ù–µ–ª—å–∑—è —É —Å–∞–º–æ–≥–æ —Å–µ–±—è —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏")
                    return
                elif result[0] <= 0:
                    bot.reply_to(message, "–£ –Ω–µ–≥–æ –Ω–µ—Ç –¥–µ–Ω–µ–≥")
                else:
                    robMoney = random.randint(1, result[0])
                    conn = sqlite3.connect("liders.sql")
                    cur = conn.cursor()

                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] - robMoney, result[1] - robMoney, from_user))
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + robMoney, res[1] + robMoney, user_id))

                    conn.commit()
                    cur.close()
                    conn.close()
                    bot.reply_to(message, f"–¢—ã —É–∫—Ä–∞–ª —É {result[2]}, {robMoney} –¥–µ–Ω–µ–≥üí∏")
            else:
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()

                cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (user_id,))
                res = cur.fetchone()
                cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (from_user,))
                result = cur.fetchone()

                cur.close()
                conn.close()
                if result is None:
                    bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µü§∑")
                    return
                elif res[2] == result[2]:
                    bot.reply_to(message, "–ù–µ–ª—å–∑—è —É —Å–∞–º–æ–≥–æ —Å–µ–±—è —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏")
                    return
                else:
                    robMoney = random.randint(0, 150)
                    conn = sqlite3.connect("liders.sql")
                    cur = conn.cursor()

                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] - robMoney, res[1] - robMoney, user_id))

                    conn.commit()
                    cur.close()
                    conn.close()
                    bot.reply_to(message, f"–¢–µ–±—è —Å–ø–æ–π–º–∞–ª–∏ —Ç–≤–æ–π —à—Ç—Ä–∞—Ñ, {robMoney} –¥–µ–Ω–µ–≥üí∏")
        else:
            chance = random.randint(1, 3)
            if chance != 3:
                try:
                    from_user = int(args[0])
                except ValueError:
                    bot.reply_to(message, "–í–≤–µ–¥–∏ ID –≤ —Ü–∏—Ñ—Ä–∞—Ö")
                    return
                except IndexError:
                    bot.reply_to(message, "–í–≤–µ–¥–∏ ID –≤ —Ü–∏—Ñ—Ä–∞—Ö")
                    return
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()

                cur.execute("SELECT money, allmoney, name, user_id FROM liders WHERE user_id = ?", (from_user,))
                result = cur.fetchone()
                cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (user_id,))
                res = cur.fetchone()

                cur.close()
                conn.close()
                if result is None:
                    bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µü§∑")
                    return
                elif res[2] == result[3]:
                    bot.reply_to(message, "–ù–µ–ª—å–∑—è —É —Å–∞–º–æ–≥–æ —Å–µ–±—è —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏")
                    return
                elif result[0] <= 0:
                    bot.reply_to(message, "–£ –Ω–µ–≥–æ –Ω–µ—Ç –¥–µ–Ω–µ–≥")
                    return
                else:
                    robMoney = random.randint(1, result[0])
                    conn = sqlite3.connect("liders.sql")
                    cur = conn.cursor()

                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] - robMoney, result[1] - robMoney, from_user))
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + robMoney, res[1] + robMoney, user_id))

                    conn.commit()
                    cur.close()
                    conn.close()
                    bot.reply_to(message, f"–¢—ã —É–∫—Ä–∞–ª —É {result[2]}, {robMoney} –¥–µ–Ω–µ–≥üí∏")
            else:
                try:
                    from_user = int(args[0])
                except ValueError:
                    bot.reply_to(message, "–í–≤–µ–¥–∏ ID –≤ —Ü–∏—Ñ—Ä–∞—Ö")
                    return
                except IndexError:
                    bot.reply_to(message, "–í–≤–µ–¥–∏ ID –≤ —Ü–∏—Ñ—Ä–∞—Ö")
                    return
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()

                cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (user_id,))
                res = cur.fetchone()
                cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (from_user,))
                result = cur.fetchone()

                cur.close()
                conn.close()
                if result is None:
                    bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µü§∑")
                    return
                elif res[2] == result[2]:
                    bot.reply_to(message, "–ù–µ–ª—å–∑—è —É —Å–∞–º–æ–≥–æ —Å–µ–±—è —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏")
                    return
                else:
                    robMoney = random.randint(0, 150)
                    conn = sqlite3.connect("liders.sql")
                    cur = conn.cursor()

                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] - robMoney, res[1] - robMoney, user_id))

                    conn.commit()
                    cur.close()
                    conn.close()
                    bot.reply_to(message, f"–¢–µ–±—è —Å–ø–æ–π–º–∞–ª–∏ —Ç–≤–æ–π —à—Ç—Ä–∞—Ñ, {robMoney} –¥–µ–Ω–µ–≥üí∏")
        last_time4[user_id] = datetime.now()
    else:
    	bot.reply_to(message, "–ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤")

@bot.message_handler(commands = ["give", "givemoney"])
def givemoney(message):
    args = message.text.split(" ")
    user_id = message.from_user.id
    try:
        userId = int(args[1])
    except ValueError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /give –∏–ª–∏ /givemoney args1(int) –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, args2(int > 0) –Ω–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç")
        return
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /give –∏–ª–∏ /givemoney args1(int) –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, args2(int > 0) –Ω–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç")
        return
    if message.reply_to_message:
        money = int(args[1])
        userID = int(message.reply_to_message.from_user.id)
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()

        cur.execute("SELECT money, allmoney, name, user_id FROM liders WHERE user_id = ?", (userID,))
        result = cur.fetchone()
        cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (user_id,))
        res = cur.fetchone()

        mon = int(res[0]) - money
        if result is None:
            bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µü§∑")
            return
        elif res[2] == result[3]:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–µ–Ω—å–≥–∏")
            return
        if mon < 0:
           bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥")
           conn.commit()
           cur.close()
           conn.close()
           return
        else:
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] - money, res[1] - money, user_id))
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + money, result[1] + money, userID))

        conn.commit()
        cur.close()
        conn.close()
        bot.reply_to(message, f"–¢—ã –ø–µ—Ä–µ–≤—ë–ª {result[2]}, {args[1]} –¥–µ–Ω–µ–≥üí∏")
    else:
        try:
            money = int(args[2])
            if money <= 0:
                bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /give –∏–ª–∏ /givemoney args1(int) –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, args2(int > 0) –Ω–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç")
                return
            else:
                pass
        except ValueError:
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /give –∏–ª–∏ /givemoney args1(int) –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, args2(int > 0) –Ω–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç")
            return
        except IndexError:
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /give –∏–ª–∏ /givemoney args1(int) –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, args2(int > 0) –Ω–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç")
            return
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()

        cur.execute("SELECT money, allmoney, name, user_id FROM liders WHERE user_id = ?", (userId,))
        result = cur.fetchone()
        cur.execute("SELECT money, allmoney, user_id FROM liders WHERE user_id = ?", (user_id,))
        res = cur.fetchone()

        mon = int(res[0]) - money
        if result is None:
            bot.reply_to(message, "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µü§∑")
            return
        elif res[2] == result[3]:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–µ–Ω—å–≥–∏ –¥–µ–Ω—å–≥–∏")
            return
        if mon < 0:
            bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥")
            conn.commit()
            cur.close()
            conn.close()
            return
        else:
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] - money, res[1] - money, user_id))
            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + money, result[1] + money, userId))

        conn.commit()
        cur.close()
        conn.close()
        bot.reply_to(message, f"–¢—ã –ø–µ—Ä–µ–≤—ë–ª {result[2]}, {args[2]} –¥–µ–Ω–µ–≥üí∏")

@bot.message_handler(commands = ["add", "addmoney"])
def addmoney(message):
    your_status = bot.get_chat_member(message.chat.id, message.from_user.id).status
    if your_status == "creator":
        args = message.text.split()[1:]
        try:
            addMoney = int(args[0])
        except ValueError:
            bot.reply_to("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /add /addmoney args1(int)")
            return
        except IndexError:
            bot.reply_to("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /add /addmoney args1(int)")
            return
        conn = sqlite3.connect("liders.sql")
        cur = conn.cursor()

        cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()

        cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + addMoney, result[1] + addMoney, message.from_user.id))
        bot.reply_to(message, f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å {addMoney} –¥–µ–Ω–µ–≥üí∏")

        conn.commit()
        cur.close()
        conn.close()
    else:
        bot.reply_to(message, f"–£ {message.from_user.first_name} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æüòÑ")

@bot.message_handler(commands = ["roulette"])
def roulette(message):
    global inGame
    roulette = random.randint(0, 36)
    user_id = message.from_user.id
    redNum = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
    blackNum = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]
    oddNum = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]
    evenNum = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]
    inRoul = ["red", "black", "odd", "even", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"]
    args = message.text.split(" ")
    try:
        dep = int(args[1])
        if dep <= 0:
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /roulette args1(int) args2(black, red, odd, even, number –æ—Ç 0 –¥–æ 36)")
            return
        else:
            pass
    except ValueError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /roulette args1(int) args2(black, red, odd, even, number –æ—Ç 0 –¥–æ 36)")
        return
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /roulette args1(int) args2(black, red, odd, even, number –æ—Ç 0 –¥–æ 36)")
        return
    try:
        num = int(args[1])
    except ValueError:
        num = args[1]
        return
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /roulette args1(int) args2(black, red, odd, even, number –æ—Ç 0 –¥–æ 36)")
        return
    conn = sqlite3.connect("liders.sql")
    cur = conn.cursor()

    cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if user_id not in inGame:
        if args[2].lower() in inRoul:
            if result[0] >= dep:
                now = int(datetime.now().timestamp())
                waiting = (now + 30)
                bot.reply_to(message, f"–í—ã –ø–æ—Å—Ç–≤–∏–ª–∏ –Ω–∞ {args[2]}, {args[1]} –¥–µ–Ω–µ–≥üí∏\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥.")
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] - dep, result[1] - dep, user_id))
                cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
                res = cur.fetchone()
                conn.commit()
                inGame.append(user_id)
                while waiting != int(datetime.now().timestamp()):
                    pass
                if args[2].lower() == "red" and roulette in redNum:
                    win = dep * 2
                        
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + (dep * 2), res[1] + (dep * 2), user_id))
                    conn.commit()
                    if roulette in redNum:
                        colour = "üü•"
                    else:
                        colour = "‚¨õ"
                    bot.reply_to(message, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –¥–µ–Ω–µ–≥üí∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} {colour}")
                elif args[2].lower() == "black" and roulette in blackNum:
                    win = dep * 2
                        
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + (dep * 2), res[1] + (dep * 2), user_id))
                    conn.commit()
                    if roulette in redNum:
                        colour = "üü•"
                    else:
                        colour = "‚¨õ"
                    bot.reply_to(message, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –¥–µ–Ω–µ–≥üí∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} {colour}")
                elif args[2].lower() == "odd" and roulette in oddNum:
                    win = dep * 2
                        
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + (dep * 2), res[1] + (dep * 2), user_id))
                    conn.commit()
                    if roulette in redNum:
                        colour = "üü•"
                    else:
                        colour = "‚¨õ"
                    bot.reply_to(message, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –¥–µ–Ω–µ–≥üí∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} {colour}")
                elif args[2].lower() == "even" and roulette in evenNum:
                    win = dep * 2
                        
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + (dep * 2), result[1] + (dep * 2), user_id))
                    conn.commit()
                    if roulette in redNum:
                        colour = "üü•"
                    else:
                        colour = "‚¨õ"
                    bot.reply_to(message, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –¥–µ–Ω–µ–≥üí∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} {colour}")
                elif num == roulette:
                    win = dep * 4
                        
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + (dep * 4), result[1] + (dep * 4), user_id))
                    conn.commit()
                    if roulette in redNum:
                        colour = "üü•"
                    else:
                        colour = "‚¨õ"
                    bot.reply_to(message, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –¥–µ–Ω–µ–≥üí∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} {colour}")
                elif args[2].lower() == "0" and roulette == 0:
                    win = dep * 6
                        
                    cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] + (dep * 6), result[1] + (dep * 6), user_id))
                    conn.commit()
                    bot.reply_to(message, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –¥–µ–Ω–µ–≥üí∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} üü©")
                else:
                    if roulette in redNum:
                        colour = "üü•"
                    elif roulette in blackNum:
                        colour = "‚¨õ"
                    else:
                        colour = "üü©"
                    bot.send_message(message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {roulette} {colour}")
                cur.close()
                conn.close()
                inGame.remove(user_id)
            else:
                bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å, —Å—Ç–∞–≤–∫—É –≤—ã—à–µ —á–µ–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å")
        else:
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /roulette args1(int > 0) args2(black, red, odd, even, number –æ—Ç 0 –¥–æ 36)")
    else:
        bot.reply_to(message, "–¢—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —á—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∫—É")

@bot.message_handler(commands = ["slots", "slotmachine"])
def slots(message):
    global inGame
    user_id = message.from_user.id
    args = message.text.split()[1:]
    try:
        dep = int(args[0])
        if dep <= 0:
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /slots –∏–ª–∏ /slotmachine arg(int > 0)")
            return
        else:
            pass
    except ValueError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /slots –∏–ª–∏ /slotmachine arg(int > 0)")
        return
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /slots –∏–ª–∏ /slotmachine arg(int > 0)")
        return
    slotStik = ["üíé", "üíµ", "üçí", "üçä", "7Ô∏è‚É£"]
    oneSlot = random.choice(slotStik)
    twoSlot = random.choice(slotStik)
    threeSlot = random.choice(slotStik)
    conn = sqlite3.connect("liders.sql")
    cur = conn.cursor()

    cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
    result = cur.fetchone()

    cur.close()
    conn.close()

    if user_id not in inGame:
        if result[0] >= dep:
            now = int(datetime.now().timestamp())
            waiting = (now + 30)
            conn = sqlite3.connect("liders.sql")
            cur = conn.cursor()

            cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (result[0] - dep, result[1] - dep, user_id))
            cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
            res = cur.fetchone()

            conn.commit()
            bot.reply_to(message, f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {dep} –¥–µ–Ω–µ–≥üí∏\n–ü–æ–¥–æ–∂–¥–∏ 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            inGame.append(user_id)
            while waiting != int(datetime.now().timestamp()):
                pass
            if oneSlot == twoSlot and twoSlot == threeSlot and threeSlot == "7Ô∏è‚É£":
                win = dep * 6
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + dep * 6, res[1] + dep * 6, user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª –¥–∂–µ–∫–ø–æ—Ç:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == threeSlot and threeSlot == "üçä":
                win = dep * 2
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + dep * 2, res[1] + dep * 2, user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == threeSlot and threeSlot == "üçí":
                win = dep * 2
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + dep * 2, res[1] + dep * 2, user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == threeSlot and threeSlot == "üíµ":
                win = dep * 2
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + dep * 2, res[1] + dep * 2, user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == threeSlot and threeSlot == "üíé":
                win = dep * 3
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + dep * 3, res[1] + dep * 3, user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == "üçä":
                win = round(dep * 1.25, 0)
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + round(dep * 1.25, 0), res[1] + round(dep * 1.25, 0), user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == "üçí":
                win = round(dep * 1.25, 0)
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + round(dep * 1.25, 0), res[1] + round(dep * 1.25, 0), user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == "üíµ":
                win = round(dep * 1.5, 0)
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + round(dep * 1.5, 0), res[1] + round(dep * 1.5, 0), user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            elif oneSlot == twoSlot and twoSlot == "üíé":
                win = dep * 2
                cur.execute("UPDATE liders SET money = ?, allmoney = ? WHERE user_id = ?", (res[0] + dep * 2, res[1] + dep * 2, user_id))
                conn.commit()
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win} –¥–µ–Ω–µ–≥üí∏")
            else:
                bot.reply_to(message, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ:\n{oneSlot}{twoSlot}{threeSlot}\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª: {dep} –¥–µ–Ω–µ–≥üí∏")
            cur.close()
            conn.close()
            inGame.remove(user_id)
        else:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å, —Å—Ç–∞–≤–∫—É –≤—ã—à–µ —á–µ–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å")
    else:
        bot.reply_to(message, "–¢—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —á—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∫—É")

def CreateCards():
    card = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
    mast = ["‚ô†", "‚ô•", "‚ô£", "‚ô¶"]

    ranCard = random.choice(card)
    ranMast = random.choice(mast)
    return ranCard, ranMast

@bot.message_handler(commands = ["blackjack"])
def blackjack(message):
    global dilerCards
    global dilerPoints
    global yourPoints
    global deposit
    global start
    user_id = message.from_user.id
    args = message.text.split()[1:]
    yourPoints[user_id] = 0
    dilerPoints[user_id] = 0
    start[user_id] = 0
    try:
        dep = int(args[0])
        if dep <= 0:
            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /blackjack arg(int > 0)")
            return
        else:
            pass
    except ValueError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /blackjack arg(int > 0)")
        return
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /blackjack arg(int > 0)")
        return
    
    conn = sqlite3.connect("liders.sql")
    cur = conn.cursor()

    cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
    result = cur.fetchone()

    deposit[user_id] = dep
    if user_id not in inGame:
        if result[0] >= dep:
            dilerCards[user_id] = ()
            yourCards[user_id] = ()
            cur.execute("SELECT money, allmoney FROM liders WHERE user_id = ?", (user_id,))
            res = cur.fetchone()

            conn.commit() 
            inGame.append(user_id)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data = "takecard"))
            bot.send_message(message.chat.id, "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É?", reply_markup = markup)
        else:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å, —Å—Ç–∞–≤–∫—É –≤—ã—à–µ —á–µ–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å")
    else:
        bot.reply_to(message, "–¢—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —á—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∫—É")
    cur.close()
    conn.close()

# Admin comands
@bot.message_handler(commands = ["kick"])
def kick(message):
    your_status = bot.get_chat_member(message.chat.id, message.from_user.id).status
    if your_status in ["administrator", "creator"]:
        args = message.text.split()[1:]
        if message.reply_to_message:
            chat_id = message.chat.id
            user_id = message.reply_to_message.from_user.id
            user_status = bot.get_chat_member(chat_id, user_id).status
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ωa, –≥–µ–Ω–∏–π")
            else:
                bot.kick_chat_member(chat_id, user_id)
                bot.reply_to(message, f"–í—ã –≤—ã–≥–Ω–∞–ª–∏ {message.reply_to_message.from_user.first_name}üî®")
        else:
            chat_id = message.chat.id
            try:
                user_id = args[0]
            except ValueError:
                bot.reply_to(message, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            except IndexError:
                bot.reply_to(message, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            user_status = bot.get_chat_member(chat_id, user_id).status
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞, –≥–µ–Ω–∏–π")
            else:
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()

                cur.execute("SELECT name FROM liders WHERE user_id = ?", (user_id,))
                result = cur.fetchone()
            
                cur.close()
                conn.close()
                bot.kick_chat_member(chat_id, user_id)
                bot.reply_to(message, f"–í—ã –≤—ã–≥–Ω–∞–ª–∏ {result[0]}üî®")
    else:
        bot.reply_to(message, f"–£ {message.from_user.first_name} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æüòÑ")
		
@bot.message_handler(commands=["mute"])
def mute(message):
    your_status = bot.get_chat_member(message.chat.id, message.from_user.id).status
    if your_status in ["administrator", "creator"]:
        args = message.text.split(" ")
        if message.reply_to_message:
            chat_id = message.chat.id
            user_id = message.reply_to_message.from_user.id
            user_status = bot.get_chat_member(chat_id, user_id).status
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ωa, –≥–µ–Ω–∏–π")
            else:
                duration = 60
                if args:
                    try:
                        duration = int(args[1])
                    except ValueError:
                        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
                        return
                    except IndexError:
                        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
                        return
                    if duration < 1:
                        bot.reply_to(message, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        return
                    if duration > 4320:
                        bot.reply_to(message, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - 3 –¥–Ω—è.")
                        return
                until_date = int(datetime.now().timestamp()) + duration * 60
                bot.restrict_chat_member(chat_id, user_id, until_date=until_date)
                bot.reply_to(message, f"{message.reply_to_message.from_user.first_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.ü§ê")
        else:
            chat_id = message.chat.id
            try:
                user_id = int(args[1])
            except ValueError:
                bot.reply_to(message, "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            except IndexError:
                bot.reply_to(message, "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            user_status = bot.get_chat_member(chat_id, user_id).status
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ωa, –≥–µ–Ω–∏–π")
            else:
                duration = 60
                if args:
                    try:
                        duration = int(args[2])
                    except ValueError:
                        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
                        return
                    except IndexError:
                        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
                        return
                    if duration < 1:
                        bot.reply_to(message, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        return
                    if duration > 4320:
                        bot.reply_to(message, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - 3 –¥–Ω—è.")
                        return
                until_date = int(datetime.now().timestamp()) + duration * 60
                bot.restrict_chat_member(chat_id, user_id, until_date=until_date)
                conn = sqlite3.connect("liders.sql")
                cur = conn.cursor()

                cur.execute("SELECT name FROM liders WHERE user_id = ?", (user_id,))
                result = cur.fetchone()
            
                cur.close()
                conn.close()
                bot.reply_to(message, f"{result[0]} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.ü§ê")
    else:
        bot.reply_to(message, f"–£ {message.from_user.first_name} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æüòÑ")

@bot.message_handler(commands=["unmute"])
def unmute(message):
    your_status = bot.get_chat_member(message.chat.id, message.from_user.id).status
    if your_status in ["administrator", "creator"]:
        args = message.text.split()[1:]
        if message.reply_to_message:
            chat_id = message.chat.id
            user_id = message.reply_to_message.from_user.id
            bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
            bot.reply_to(message, f"{message.reply_to_message.from_user.first_name} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.üòÆ")
        else:
            chat_id = message.chat.id
            try:
                user_id = args[0]
            except ValueError:
                bot.reply_to(message, "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            except IndexError:
                bot.reply_to(message, "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
            conn = sqlite3.connect("liders.sql")
            cur = conn.cursor()

            cur.execute("SELECT name FROM liders WHERE user_id = ?", (user_id,))
            result = cur.fetchone()
            
            cur.close()
            conn.close()
            bot.reply_to(message, f"{result[0]} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.üòÆ")
    else:
        bot.reply_to(message, f"–£ {message.from_user.first_name} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æüòÑ")

#Debug comand
@bot.message_handler(commands = ["self"])
def self(message):
    bot.send_message(message.from_user.id, "bb")

# Chat bot answering. Without commands
@bot.message_handler(content_types = ["text"])
def chating(message):
    global last_time5
    conn = sqlite3.connect("liders.sql")
    cur = conn.cursor()
    if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç" or message.text.lower() == "–¥–∞—Ä–æ–≤":
        bot.reply_to(message, f"–î–∞—Ä–æ–≤ {message.from_user.first_name}")
    elif message.text.lower() == "–ø–æ–∫–∞":
        bot.reply_to(message, f"–ë–± {message.from_user.first_name}")
    elif message.text[0] == "+" and message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        your_id = message.from_user.id

        cur.execute("SELECT reputation FROM liders WHERE user_id = ?", (user_id,))
        result = cur.fetchone()
        if user_id == your_id:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è —Å–µ–±–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é")
            return
        elif result[0] is None:
            cur.execute("UPDATE liders SET reputation = ? WHERE user_id = ?", (0, user_id))
            conn.commit()
        else:
            pass
        cur.execute("SELECT reputation FROM liders WHERE user_id = ?", (user_id,))
        res = cur.fetchone()
        if user_id not in last_time5:
            delta = 14500
        else:
            delta = (datetime.now() - last_time5[user_id]).total_seconds()
        if delta > 14400:
            cur.execute("UPDATE liders SET reputation = ? WHERE user_id = ?", (res[0] + 1, user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–†–µ–ø—É—Ç–∞—Ü–∏—è –æ–∫–∞–∑–∞–Ω–∞ {message.reply_to_message.from_user.first_name}")
            last_time5[user_id] = datetime.now()
        else:
            bot.reply_to(message, "–ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 4 —á–∞—Å–∞")
    elif message.text[0] == "-" and message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        your_id = message.from_user.id

        cur.execute("SELECT reputation FROM liders WHERE user_id = ?", (user_id,))
        result = cur.fetchone()
        if user_id == your_id:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è –æ—Ç–Ω—è—Ç—å —É —Å–µ–±—è —Ä–µ–ø—É—Ç–∞—Ü–∏—é")
            return
        elif result[0] is None:
            cur.execute("UPDATE liders SET reputation = ? WHERE user_id = ?", (0, user_id))
            conn.commit()
        else:
            pass
        cur.execute("SELECT reputation FROM liders WHERE user_id = ?", (user_id,))
        res = cur.fetchone()
        if user_id not in last_time5:
            delta = 14500
        else:
            delta = (datetime.now() - last_time5[user_id]).total_seconds()
        if delta > 14400:
            cur.execute("UPDATE liders SET reputation = ? WHERE user_id = ?", (res[0] - 1, user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–ú–∏–Ω—É—Å —Ä–µ–ø—É—Ç–∞—Ü–∏—è —É {message.reply_to_message.from_user.first_name}")
            last_time5[user_id] = datetime.now()
        else:
            bot.reply_to(message, "–ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 4 —á–∞—Å–∞")
    cur.close()
    conn.close()
		
@bot.message_handler(content_types = ["photo"])
def get_photo(message):
    if message.from_user.username == "Ashita_No_Joe_2009":
        bot.reply_to(message, "–ò–º–±–∞ —Ñ–æ—Ç–æüòÑ")
    else:
        bot.reply_to(message, f"–≠—Ç–æ —Ñ–æ—Ç–æ —Å–∫–∏–Ω—É–ª, {message.from_user.first_name}")

bot.infinity_polling()

